# -*- coding: utf-8 -*-

"""
/***************************************************************************
 MapComponentizer
                                 A QGIS plugin
 Convert a QGIS project into a React Web Application
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-08
        copyright            : (C) 2024 by WhereGroup GmbH
        email                : info@wheregroup.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'WhereGroup GmbH'
__date__ = '2024-03-08'
__copyright__ = '(C) 2024 by WhereGroup GmbH'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFolderDestination,
                       QgsProject
                       )
import subprocess
import shutil
from qgis.core import QgsApplication, QgsProject

from .ProjectUtils import *
from .LayersExporter import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *





class MapComponentizerAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
 

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        plugin_path = os.path.dirname(os.path.realpath(__file__))

        self.addParameter(
            QgsProcessingParameterFolderDestination(
                self.OUTPUT,
                self.tr('Output folder'),
                plugin_path + '/output'
                )
        )

    def processAlgorithm(self, parameters, context, feedback):
     
        # Send some information to the user
        feedback.pushInfo('Output folder is {}'.format(self.OUTPUT))
        plugin_path = os.path.dirname(os.path.realpath(__file__))
        
        BASE_OUTPUT_DIRECTORY = parameters[self.OUTPUT]
        TEMP_DIRECTORY = f'{plugin_path}/tmp'
        TEMPLATE_PATH = f'{plugin_path}/templates/MapComponentizer'
        #QGIS_PREFIX_PATH = "/usr/lib/qgis"
               

        # # get Application path
        # qgs = QgsApplication([], False)
        # QgsApplication.setPrefixPath(QGIS_PREFIX_PATH, True)
        # QgsApplication.initQgis()
        # for alg in QgsApplication.processingRegistry().algorithms():
        #     print(alg.id(), "->", alg.displayName())
    
        # Get the project instance
        project = QgsProject.instance()
        feedback.pushInfo(project.absolutePath())
 
        # Load test project
        #project.read(f'{plugin_path}/testdata/testProject.qgs')        
        projectName = project.baseName()

        projectFolder, exportFolder = ProjectUtils.create_project_directory(projectName, BASE_OUTPUT_DIRECTORY)
        #export project details and layers
        ProjectUtils.export_project_details(project, exportFolder)
        LayersExporter.reproject_layers(project, TEMP_DIRECTORY)

        for layer in project.mapLayers().values():
            LayersExporter.export_layer(project, layer, exportFolder, feedback)
        
        
        #Create the MapComponents project using the selected template
        shutil.copytree(TEMPLATE_PATH, f'{projectFolder}', dirs_exist_ok=True)
        #subprocess.run(["mv", "exported", "public" ], cwd=f'{projectFolder}')
               
        #Start dev Server in the new app 
        #subprocess.run(['yarn'], cwd=f'{projectFolder}')
        
        # open dev server in the browser
        # url = "http://localhost:5173/"        
        # try:
        #     subprocess.run(['xdg-open', url], check=True)            
        # except subprocess.CalledProcessError as e:
        #     print(f"Error: {e}")            

        #qgs.exitQgis()

        shutil.rmtree(TEMP_DIRECTORY)
        os.mkdir(TEMP_DIRECTORY)
        

        #subprocess.run(['yarn', 'dev'], cwd=f'{projectFolder}')    

        return {"message": f'Your Mapcomponents App has been created in the following folder: {projectFolder}'}
   
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'QGIS to MapComponents'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'MapComponents'
    
    def shortHelpString(self):
        return self.tr("Make a React WebApp from your actual project and run it on a dev server")

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return MapComponentizerAlgorithm()
